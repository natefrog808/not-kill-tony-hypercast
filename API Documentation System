```markdown
# AI Kill Tony API Documentation

## Overview

The AI Kill Tony API provides programmatic access to manage and interact with the AI-powered comedy show platform. This documentation covers all available endpoints, authentication methods, and integration examples.

## Authentication

### Bearer Token Authentication

```typescript
const headers = {
  'Authorization': 'Bearer <your_api_token>',
  'Content-Type': 'application/json'
};
```

API tokens can be obtained from the developer dashboard. All API requests must include this token in the Authorization header.

## Core Endpoints

### Show Management

#### Create Show

```http
POST /api/v1/shows
```

Create a new AI Kill Tony show instance.

**Request Body:**
```json
{
  "title": "Friday Night Special",
  "scheduledStart": "2025-02-01T20:00:00Z",
  "settings": {
    "maxPerformers": 10,
    "performanceTimeLimit": 60,
    "audienceInteraction": true
  }
}
```

**Response:**
```json
{
  "showId": "show_abc123",
  "status": "scheduled",
  "createdAt": "2025-01-30T15:00:00Z",
  "settings": {
    "maxPerformers": 10,
    "performanceTimeLimit": 60,
    "audienceInteraction": true
  }
}
```

#### Get Show Status

```http
GET /api/v1/shows/{showId}
```

Retrieve current status and details of a show.

**Response:**
```json
{
  "showId": "show_abc123",
  "status": "live",
  "currentPerformer": {
    "id": "perf_xyz789",
    "name": "AI Comedian #42",
    "timeRemaining": 30
  },
  "statistics": {
    "audienceCount": 250,
    "averageLaughScore": 8.5,
    "performerCount": 3
  }
}
```

### Performer Management

#### Generate Performer

```http
POST /api/v1/performers
```

Generate a new AI performer with unique characteristics.

**Request Body:**
```json
{
  "style": "observational",
  "personality": {
    "confidence": 0.8,
    "energy": 0.7,
    "quirkiness": 0.6
  }
}
```

**Response:**
```json
{
  "performerId": "perf_xyz789",
  "name": "AI Comedian #42",
  "style": "observational",
  "personality": {
    "confidence": 0.8,
    "energy": 0.7,
    "quirkiness": 0.6
  },
  "generatedBio": "A rising star in the circuit..."
}
```

### Audience Interaction

#### Submit Reaction

```http
POST /api/v1/shows/{showId}/reactions
```

Submit an audience reaction to the current performance.

**Request Body:**
```json
{
  "type": "LAUGH",
  "intensity": 0.8,
  "timestamp": "2025-01-30T20:15:30Z"
}
```

**Response:**
```json
{
  "reactionId": "react_123",
  "processed": true,
  "impactScore": 0.75
}
```

## WebSocket Events

### Real-time Show Events

Connect to the WebSocket endpoint for real-time updates:

```typescript
const ws = new WebSocket('wss://api.killtony.ai/ws');

ws.onmessage = (event) => {
  const data = JSON.parse(event.data);
  switch (data.type) {
    case 'PERFORMER_READY':
      handleNewPerformer(data.performer);
      break;
    case 'AUDIENCE_REACTION':
      updateAudienceMetrics(data.reaction);
      break;
    case 'SHOW_STATUS':
      updateShowStatus(data.status);
      break;
  }
};
```

## Rate Limiting

The API implements rate limiting based on the following tiers:

| Tier | Rate Limit | Burst Limit |
|------|------------|-------------|
| Basic | 100/min | 150/min |
| Pro | 500/min | 750/min |
| Enterprise | Custom | Custom |

## Error Handling

The API uses standard HTTP status codes and returns detailed error messages:

```json
{
  "error": {
    "code": "RATE_LIMIT_EXCEEDED",
    "message": "Rate limit exceeded. Please try again in 60 seconds.",
    "details": {
      "limit": 100,
      "remaining": 0,
      "resetTime": "2025-01-30T20:16:00Z"
    }
  }
}
```

## SDK Examples

### Node.js SDK

```typescript
import { KillTonyClient } from '@killtony/sdk';

const client = new KillTonyClient({
  apiToken: 'your_api_token'
});

// Create a new show
const show = await client.shows.create({
  title: 'Friday Night Special',
  scheduledStart: new Date('2025-02-01T20:00:00Z')
});

// Generate a performer
const performer = await client.performers.generate({
  style: 'observational',
  personality: {
    confidence: 0.8,
    energy: 0.7,
    quirkiness: 0.6
  }
});

// Submit audience reaction
await client.shows.submitReaction(show.id, {
  type: 'LAUGH',
  intensity: 0.8
});
```

### Python SDK

```python
from killtony import KillTonyClient

client = KillTonyClient(api_token='your_api_token')

# Create a new show
show = client.shows.create(
    title='Friday Night Special',
    scheduled_start='2025-02-01T20:00:00Z'
)

# Generate a performer
performer = client.performers.generate(
    style='observational',
    personality={
        'confidence': 0.8,
        'energy': 0.7,
        'quirkiness': 0.6
    }
)

# Submit audience reaction
client.shows.submit_reaction(
    show_id=show.id,
    reaction_type='LAUGH',
    intensity=0.8
)
```

## Webhooks

Configure webhooks to receive real-time updates:

```json
{
  "webhookUrl": "https://your-server.com/webhook",
  "events": [
    "show.started",
    "show.ended",
    "performer.ready",
    "audience.reaction"
  ],
  "secret": "your_webhook_secret"
}
```

## Best Practices

1. **Rate Limiting**
   - Implement exponential backoff for retry logic
   - Cache responses when appropriate
   - Use bulk endpoints for multiple operations

2. **Error Handling**
   - Always check for error responses
   - Implement proper logging
   - Use appropriate error recovery strategies

3. **Performance**
   - Use compression for large requests
   - Implement connection pooling
   - Cache API responses appropriately

## Support

For additional support:
- Email: api-support@killtony.ai
- Documentation: https://docs.killtony.ai
- Status Page: https://status.killtony.ai

## Changelog

### v1.2.0 (2025-01-30)
- Added performer personality customization
- Enhanced audience reaction analytics
- Improved WebSocket stability
- Added Python SDK support

### v1.1.0 (2025-01-15)
- Introduced webhook support
- Added show statistics endpoints
- Improved error handling
- Enhanced rate limiting controls

### v1.0.0 (2025-01-01)
- Initial API release
- Basic show management
- Performer generation
- Audience interaction support
```
