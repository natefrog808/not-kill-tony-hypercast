```yaml
# Docker Compose configuration for local development
version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://api:4000
      - WEBSOCKET_URL=ws://api:4000
    depends_on:
      - api
    networks:
      - kill-tony-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Backend API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo:27017/killtony
      - MODEL_SERVER_URL=http://model-server:8501
    depends_on:
      - redis
      - mongo
      - model-server
    networks:
      - kill-tony-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # ML Model Server
  model-server:
    build:
      context: ./model-server
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - TF_ENABLE_AUTO_MIXED_PRECISION=1
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - model-data:/models
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Redis for Caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - kill-tony-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # MongoDB for Data Storage
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - kill-tony-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Monitoring Stack
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - kill-tony-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - kill-tony-network
    depends_on:
      - prometheus

  # Logging Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - kill-tony-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
      - "5601:5601"
    networks:
      - kill-tony-network
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.9.3
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - kill-tony-network
    depends_on:
      - elasticsearch

volumes:
  redis-data:
  mongo-data:
  model-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  kill-tony-network:
    driver: bridge

---
# Kubernetes Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: killtony-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: killtony-frontend
  template:
    metadata:
      labels:
        app: killtony-frontend
    spec:
      containers:
      - name: frontend
        image: killtony-frontend:latest
        resources:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "200m"
            memory: "512Mi"
        ports:
        - containerPort: 3000
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: killtony-frontend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: killtony-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 70
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: killtony-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - killtony.ai
    secretName: killtony-tls
  rules:
  - host: killtony.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: killtony-frontend
            port:
              number: 80

---
# Monitoring Configuration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: killtony-monitor
spec:
  selector:
    matchLabels:
      app: killtony
  endpoints:
  - port: metrics
```
